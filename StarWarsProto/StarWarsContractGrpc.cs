// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/StarWarsContract.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace StartWarsContract {
  public static partial class MillenniumFalconService
  {
    static readonly string __ServiceName = "startWarsContract.MillenniumFalconService";

    static readonly grpc::Marshaller<global::StartWarsContract.OpenLightSpeedRequest> __Marshaller_startWarsContract_OpenLightSpeedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StartWarsContract.OpenLightSpeedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::StartWarsContract.OpenLightSpeedResponse> __Marshaller_startWarsContract_OpenLightSpeedResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StartWarsContract.OpenLightSpeedResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::StartWarsContract.AutoControlRequest> __Marshaller_startWarsContract_AutoControlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StartWarsContract.AutoControlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::StartWarsContract.AutoControlResponse> __Marshaller_startWarsContract_AutoControlResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StartWarsContract.AutoControlResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::StartWarsContract.OpenRadarScanningRequest> __Marshaller_startWarsContract_OpenRadarScanningRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StartWarsContract.OpenRadarScanningRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::StartWarsContract.OpenRadarScanningResponse> __Marshaller_startWarsContract_OpenRadarScanningResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StartWarsContract.OpenRadarScanningResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::StartWarsContract.RadioControlRequest> __Marshaller_startWarsContract_RadioControlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StartWarsContract.RadioControlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::StartWarsContract.RadioControlResponse> __Marshaller_startWarsContract_RadioControlResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StartWarsContract.RadioControlResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::StartWarsContract.OpenLightSpeedRequest, global::StartWarsContract.OpenLightSpeedResponse> __Method_OpenLightSpeed = new grpc::Method<global::StartWarsContract.OpenLightSpeedRequest, global::StartWarsContract.OpenLightSpeedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OpenLightSpeed",
        __Marshaller_startWarsContract_OpenLightSpeedRequest,
        __Marshaller_startWarsContract_OpenLightSpeedResponse);

    static readonly grpc::Method<global::StartWarsContract.AutoControlRequest, global::StartWarsContract.AutoControlResponse> __Method_AutoControl = new grpc::Method<global::StartWarsContract.AutoControlRequest, global::StartWarsContract.AutoControlResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AutoControl",
        __Marshaller_startWarsContract_AutoControlRequest,
        __Marshaller_startWarsContract_AutoControlResponse);

    static readonly grpc::Method<global::StartWarsContract.OpenRadarScanningRequest, global::StartWarsContract.OpenRadarScanningResponse> __Method_OpenRadarScanning = new grpc::Method<global::StartWarsContract.OpenRadarScanningRequest, global::StartWarsContract.OpenRadarScanningResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "OpenRadarScanning",
        __Marshaller_startWarsContract_OpenRadarScanningRequest,
        __Marshaller_startWarsContract_OpenRadarScanningResponse);

    static readonly grpc::Method<global::StartWarsContract.RadioControlRequest, global::StartWarsContract.RadioControlResponse> __Method_RadioControl = new grpc::Method<global::StartWarsContract.RadioControlRequest, global::StartWarsContract.RadioControlResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "RadioControl",
        __Marshaller_startWarsContract_RadioControlRequest,
        __Marshaller_startWarsContract_RadioControlResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::StartWarsContract.StarWarsContractReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MillenniumFalconService</summary>
    [grpc::BindServiceMethod(typeof(MillenniumFalconService), "BindService")]
    public abstract partial class MillenniumFalconServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::StartWarsContract.OpenLightSpeedResponse> OpenLightSpeed(global::StartWarsContract.OpenLightSpeedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AutoControl(global::StartWarsContract.AutoControlRequest request, grpc::IServerStreamWriter<global::StartWarsContract.AutoControlResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::StartWarsContract.OpenRadarScanningResponse> OpenRadarScanning(grpc::IAsyncStreamReader<global::StartWarsContract.OpenRadarScanningRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task RadioControl(grpc::IAsyncStreamReader<global::StartWarsContract.RadioControlRequest> requestStream, grpc::IServerStreamWriter<global::StartWarsContract.RadioControlResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MillenniumFalconService</summary>
    public partial class MillenniumFalconServiceClient : grpc::ClientBase<MillenniumFalconServiceClient>
    {
      /// <summary>Creates a new client for MillenniumFalconService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MillenniumFalconServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MillenniumFalconService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MillenniumFalconServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MillenniumFalconServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MillenniumFalconServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::StartWarsContract.OpenLightSpeedResponse OpenLightSpeed(global::StartWarsContract.OpenLightSpeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenLightSpeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::StartWarsContract.OpenLightSpeedResponse OpenLightSpeed(global::StartWarsContract.OpenLightSpeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OpenLightSpeed, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::StartWarsContract.OpenLightSpeedResponse> OpenLightSpeedAsync(global::StartWarsContract.OpenLightSpeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenLightSpeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::StartWarsContract.OpenLightSpeedResponse> OpenLightSpeedAsync(global::StartWarsContract.OpenLightSpeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OpenLightSpeed, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::StartWarsContract.AutoControlResponse> AutoControl(global::StartWarsContract.AutoControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AutoControl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::StartWarsContract.AutoControlResponse> AutoControl(global::StartWarsContract.AutoControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AutoControl, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::StartWarsContract.OpenRadarScanningRequest, global::StartWarsContract.OpenRadarScanningResponse> OpenRadarScanning(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OpenRadarScanning(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::StartWarsContract.OpenRadarScanningRequest, global::StartWarsContract.OpenRadarScanningResponse> OpenRadarScanning(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_OpenRadarScanning, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::StartWarsContract.RadioControlRequest, global::StartWarsContract.RadioControlResponse> RadioControl(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RadioControl(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::StartWarsContract.RadioControlRequest, global::StartWarsContract.RadioControlResponse> RadioControl(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_RadioControl, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MillenniumFalconServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MillenniumFalconServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MillenniumFalconServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_OpenLightSpeed, serviceImpl.OpenLightSpeed)
          .AddMethod(__Method_AutoControl, serviceImpl.AutoControl)
          .AddMethod(__Method_OpenRadarScanning, serviceImpl.OpenRadarScanning)
          .AddMethod(__Method_RadioControl, serviceImpl.RadioControl).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MillenniumFalconServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_OpenLightSpeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::StartWarsContract.OpenLightSpeedRequest, global::StartWarsContract.OpenLightSpeedResponse>(serviceImpl.OpenLightSpeed));
      serviceBinder.AddMethod(__Method_AutoControl, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::StartWarsContract.AutoControlRequest, global::StartWarsContract.AutoControlResponse>(serviceImpl.AutoControl));
      serviceBinder.AddMethod(__Method_OpenRadarScanning, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::StartWarsContract.OpenRadarScanningRequest, global::StartWarsContract.OpenRadarScanningResponse>(serviceImpl.OpenRadarScanning));
      serviceBinder.AddMethod(__Method_RadioControl, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::StartWarsContract.RadioControlRequest, global::StartWarsContract.RadioControlResponse>(serviceImpl.RadioControl));
    }

  }
}
#endregion
